#!/bin/bash

#  {{ ansible_managed }}
# this script runs as part of cloud-init setup on first boot of the instance
# https://cloudinit.readthedocs.io/en/latest
# https://cloudinit.readthedocs.io/en/latest/topics/dir_layout.html
# https://cloudinit.readthedocs.io/en/latest/topics/datasources/nocloud.html

# this file must not contain any non-ASCII characters for compatibility reasons!

# ## set variables here only
# set disclaimer for automatically generated files
ansible_notice="added by user-data init script via cloud-init on $(date -u) via Ansible"

USERNAME={{ vmproim_firstusername }}
USER_PASS={{ vmproim_firstuserpasshash }}
USER_SSHKEY="{{ vmproim_firstusersshpubkey }}"

# use only for static ipv4:
ipv4="{{ ipv4 }}"
DHCP_HOSTNAME={{ inventory_hostname }}
NETWORK={{ ip_network }}
NETMASK={{ ip_netmask }}
GATEWAY={{ ip_gateway }}
HOSTNAME=$DHCP_HOSTNAME
DNS1={{ ip_gateway }}
DNS2=8.8.8.8
# ## dont' set any variables below this line

echo "cloud-init script for host '$HOSTNAME' userdata is now running on hostname: $(uname -n) ..." >> /dev/kmsg

# folgende Operationen als root durchfuehren (ist eigentlich sowieso der Fall, nur um sicher zu sein)
#su - root

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Achtung: ausser zu Testzwecken niemals ssh login nur mit passwort zulassen! !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# ex: user admin mit password 12345
# perl -e 'print crypt("passwordhere", "salt"),"\n"'

# user ohne passwort hinzufuegen:
# useradd -m admin

# testumgebung: user 'admin' mit passwort:
# useradd -m -p sajEeYaHYyeSU admin
# mkdir /home/admin/.ssh
# echo 'admin  ALL=(ALL:ALL) ALL' >> /etc/sudoers
# echo $USER_SSHKEY >> /home/admin/.ssh/id_rsa.pub
# echo $USER_SSHKEY >> /home/admin/.ssh/authorized_keys


# beispiel: public SSH Key fuer ROOT user rueberkopieren
# echo $USER_SSHKEY >> ~/.ssh/id_rsa.pub

# ansible user hinzufuegen: // zum Test auch mit password
#useradd -m $USERNAME
useradd -m -p $USER_PASS $USERNAME
mkdir /home/$USERNAME/.ssh/
echo $USER_SSHKEY > /home/$USERNAME/.ssh/id_rsa.pub
echo $USER_SSHKEY >> /home/$USERNAME/.ssh/authorized_keys

chown -R $USERNAME:$USERNAME /home/$USERNAME/.ssh/
chmod 0600 -r /home/$USERNAME/.ssh/
restorecon -Rv /home/$USERNAME/.ssh
# set this user to the sudoers
echo "$USERNAME  ALL=(ALL:ALL) NOPASSWD:ALL" >> /etc/sudoers
#echo "$USERNAME  ALL=(ALL:ALL) ALL" >> /etc/sudoers
# add user to the sudoers group
usermod -aG wheel $USERNAME

# #############################################################################

# deutsches keyboard einstellen - nuetzlich fuer direkte Verbindung
# localectl set-keymap de

# Zeitzone UTC einstellen (ist eigentlich schon)
timedatectl set-timezone UTC

## ex: DHCP client ad-hoc ausfuehren um Netzwerk zu 'bekommen'
# dhclient -v
# ggf workaround, damit dies zu start ausgefuehrt wird:
# echo "#!/bin/bash
# # Solution for "No Internet Connection from VMware"
# ### BEGIN INIT INFO
# # Default-Start: 2 3 4 5
# # Default-Stop: 0 1 6
# ### END INIT INFO
# dhclient -v" >> /etc/init.d/net-autostart

# Show network interfaces:
# $ ip link show
# read link name to variable and use this along... via https://www.centos.org/forums/viewtopic.php?t=47083#p228136
interf="$(ip ntable | grep dev | sort | uniq | sed -e 's/^.*dev //;/^lo/d')"

# if ipv4 contains a valid ipv4 address
if [[ "$ipv4" =~ ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$ ]] ; then
  ## ipv4 network settings for static ip #######################################
  echo "# $ansible_notice
  DEVICE=$interf
  BOOTPROTO=static
  DHCP_HOSTNAME=$DHCP_HOSTNAME
  NETWORK=$NETWORK
  NETMASK=$NETMASK
  IPADDR=$ipv4
  # deprecated:
  # BRADCAST=ip_broadcast
  GATEWAY=$GATEWAY
  ONBOOT=yes
  TYPE=Ethernet
  " > /etc/sysconfig/network-scripts/ifcfg-$interf

  echo "# $ansible_notice
  HOSTNAME=$HOSTNAME
  GATEWAY=$GATEWAY
  DNS1=$DNS1
  DNS2=$DNS2
  # end via {{ ansible_managed }}
  " > /etc/sysconfig/network

  # get network connected
  ifup $interf

  # info: when using static ip, nsupdate could be used to update a remote nameserver

else
  ## ipv4 network settings for dynamic ip / DHCP  ##############################
  touch /etc/sysconfig/network-scripts/ifcfg-$interf
  echo "# $ansible_notice
  DEVICE=$interf
  BOOTPROTO=dhcp
  ONBOOT=yes
  TYPE=Ethernet
  USERCTL=yes
  PEERDNS=yes
  IPV6INIT=no
  PERSISTENT_DHCLIENT=1
  " > /etc/sysconfig/network-scripts/ifcfg-$interf

  echo "# $ansible_notice
  HOSTNAME=$HOSTNAME
  # end via {{ ansible_managed }}
  " > /etc/sysconfig/network

  # get network connected // this seems much too much, but makes it certain to get connected
  ifup $interf
  dhclient -v
  systemctl restart network
  sleep 10
  dhclient -v
  sleep 2

  # info: statische IP mit DHCP : / via https://ubuntuforums.org/showthread.php?t=785047
  # /etc/dhcp3/dhclient.conf:
  # alias {
  #  interface "eth0";
  #  fixed-address 192.168.1.5;
  # }
fi

# restart sshd in order to be visible on port 22 for detection by Ansible
echo "cloud-init script for host '$HOSTNAME' userdata starting SSH on hostname: $(uname -n) ..." >> /dev/kmsg
service sshd restart
# wait a while in order to be visible
sleep 10

# Datei schreiben zum Schluss, die zur verifizierung dienen koennte...
echo "$(date -u)" >> /tmp/fin_cloudinit.txt
echo "cloud-init script for host '$HOSTNAME' userdata finished on hostname: $(uname -n) ..." >> /dev/kmsg
# disable cloud-init on this instance in order to not run it again
# disable for EL:
#rm -f /etc/systemd/system/multi-user.target.wants/cloud*.service
# disable for Ubunto, Fedora:
#touch /etc/cloud/cloud-init.disabled
sleep 2

# herunterfahren zum beenden / entfernen des CD images
shutdown now

# eigentlich unnoetig:
exit 0
